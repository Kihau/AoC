#!/bin/sh

set -xe

mkdir -p build/
nasm -f win64 src/main.asm     -i src/ -o build/main.obj
nasm -f win64 src/scratch.asm  -i src/ -o build/scratch.obj
nasm -f win64 src/utils.asm    -i src/ -o build/utils.obj

nasm -f win64 src/days/day1.asm -i src/ -o build/day1.obj
nasm -f win64 src/days/day2.asm -i src/ -o build/day2.obj
nasm -f win64 src/days/day3.asm -i src/ -o build/day3.obj
nasm -f win64 src/days/day4.asm -i src/ -o build/day4.obj

nasm -f win64 src/os/windows.asm -i src/ -o build/windows.obj

objects=$(find build/ -type f -name "*.obj")

# Generate kernel32.lib
# x86_64-w64-mingw32-dlltool -d kernel32.def -l res/kernel32.lib

# Generated by the MINGW dlltool:
libkernel32="res/kernel32.lib"

# Official MS kernel32.Lib. The path may need to be adjusted if you prefer to use this one:
# libkernel32="Program Files (x86)\Windows Kits\10\Lib\10.0.22621.0\um\x64\kernel32.Lib"

# Cross building from linux using MINGW linker:
# x86_64-w64-mingw32-ld --entry=main $objects $libkernel32 --output=build/aoc.exe

# Building by using MSVC linker.
link $objects $libkernel32 /entry:main /out:build/aoc.exe 

# Building using clang + GNU toolchain.
# clang -target x86_64-pc-win32-gnu $objects -o build/aoc.exe

# Building using clang + MSVC toolchain.
# clang -target x86_64-pc-win32-msvc $objects -o build/aoc.exe

# wine ./build/aoc.exe
# ./build/aoc.exe
